<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome | 张亚超的技术博客YACHAO&#39;Blog</title>
  <subtitle>每一个不起眼的瞬间都是对生命的辜负！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://devchao.com/"/>
  <updated>2017-07-20T07:13:34.000Z</updated>
  <id>https://devchao.com/</id>
  
  <author>
    <name>DevChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS调节显示器参数之将屏幕亮度降低至系统亮度以下</title>
    <link href="https://devchao.com/2017/07/20/iOS%E8%B0%83%E8%8A%82%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8F%82%E6%95%B0%E4%B9%8B%E5%B0%86%E5%B1%8F%E5%B9%95%E4%BA%AE%E5%BA%A6%E9%99%8D%E4%BD%8E%E8%87%B3%E7%B3%BB%E7%BB%9F%E4%BA%AE%E5%BA%A6%E4%BB%A5%E4%B8%8B/"/>
    <id>https://devchao.com/2017/07/20/iOS调节显示器参数之将屏幕亮度降低至系统亮度以下/</id>
    <published>2017-07-20T06:46:40.000Z</published>
    <updated>2017-07-20T07:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/anthonya1999/GoodNight" target="_blank" rel="external">GoodNight</a>:使用IOMobileFramebuffer调节显示器参数的App.能够实现以下功能：</p>
<ul>
<li>更改屏幕温度</li>
<li>把亮度低于iOS通常会允许你的最低亮度</li>
<li>调整帧缓冲区的RGB值</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.下载GoodNight库，将Shared下文件添加入项目，具体如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">IOMobileFramebufferClient.h</div><div class="line">IOMobileFramebufferClient.m</div><div class="line">MobileGestaltClient.h</div><div class="line">MobileGestaltClient.m</div><div class="line">SpringBoardServicesClient.h</div><div class="line">SpringBoardServicesClient.m</div><div class="line">GammaController.h</div><div class="line">GammaController.m</div><div class="line">Brightness.h</div><div class="line">Brightness.c</div><div class="line">NSDate+Extensions.h</div><div class="line">NSDate+Extensions.m</div><div class="line">Solar.h</div><div class="line">Solar.m</div></pre></td></tr></table></figure>
<p>2.打开TARGETS&gt;Capabilities&gt;APPGroup，添加一个App groups,并选中打勾。<br><img src="https://ws1.sinaimg.cn/large/00663vn1ly1fhqbyforvyj314s0c4aba.jpg" alt=""></p>
<p>3.将下列代码添加至pch文件中, appGroupID 改成自己的app group ID.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#define appGroupID @&quot;your group id&quot;</div><div class="line">#define userDefaults [NSUserDefaults standardUserDefaults]</div><div class="line">#define groupDefaults [[NSUserDefaults alloc] initWithSuiteName:appGroupID]</div><div class="line">#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</div><div class="line">#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</div><div class="line">#define app [UIApplication sharedApplication]</div></pre></td></tr></table></figure>
<p>4.在GammaController.h中添加如下头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#pragma mark - custome</div><div class="line">+ (void)setDimWithRed:(float)redDim green:(float)greenDim blue:(float)blueDim;</div></pre></td></tr></table></figure>
<p>5.在GammaController.m中添加如下实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#pragma mark - custome</div><div class="line">+ (void)setDimWithRed:(float)redDim green:(float)greenDim blue:(float)blueDim</div><div class="line">&#123;</div><div class="line">	//重置白点</div><div class="line">    [self resetWhitePoint];</div><div class="line">    //设置显示器参数</div><div class="line">    [self setGammaWithRed:redDim green:greenDim blue:blueDim];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PS: redDim greenDim blueDim 分别为0-1之间的值，代表显示器的蒙版颜色</code></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我们打算创建一个slider,然后拖动slider的同时改变屏幕的亮度，将其逐渐降低到最低。下面开始实现。</p>
<p>1.新建一个工程项目，在主视图上添加一个UISlider，设置最小值为0，最大值为1，并进行简单的布局，如下图：<br><img src="https://ws1.sinaimg.cn/large/00663vn1ly1fhqc9nxhhsj31f010kag7.jpg" alt=""></p>
<p>2.为slider添加事件<code>- (IBAction)dimLevelChanged:(id)sender</code>，然后在viewcontroller中引入头文件<code>#import &quot;GammaController.h&quot;</code>.</p>
<p>3.在<code>- (IBAction)dimLevelChanged:(id)sender</code>中调用如下方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UISlider *slider = (UISlider *)sender;</div><div class="line">    [GammaController setDimWithRed:slider.value green:slider.value blue:slider.value];</div></pre></td></tr></table></figure>
<p>4.好的，Run 调节slider的值，你将会发现屏幕亮度随之发生了变化。</p>
<p><a href="https://github.com/yachaocn/adjust-brightness-lower-than-iOS-allow." target="_blank" rel="external">查看源码</a></p>
<p>如发现本文侵犯了您的知识产权请马上通知我:<code>zyachao@163.com</code>，我将在第一时间删除！</p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/anthonya1999/GoodNight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoodNight&lt;/a&gt;:使用IOMobileFramebuffer调节显示器参数的App.能够实现以下功
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>webview缩放与样式</title>
    <link href="https://devchao.com/2017/07/20/webview%E7%BC%A9%E6%94%BE%E4%B8%8E%E6%A0%B7%E5%BC%8F/"/>
    <id>https://devchao.com/2017/07/20/webview缩放与样式/</id>
    <published>2017-07-20T06:45:20.000Z</published>
    <updated>2017-07-20T06:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Webview添加缩放与外观样式</p>
<p>1.设置属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pibWebView.scalesPageToFit = YES;</div><div class="line">pibWebView.delegate = self;</div></pre></td></tr></table></figure>
<p>2.代理方法中添加如下JS代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    //    yachaocn 2015年12月24日09:08:43</div><div class="line">    //js代码 写入缩放属性</div><div class="line">    NSString *jsMeta = [NSString stringWithFormat:@&quot;var meta = document.createElement(&apos;meta&apos;);meta.content=&apos;width=device-width,initial-scale=1.0,minimum-scale=.5,maximum-scale=3&apos;;meta.name=&apos;viewport&apos;;document.getElementsByTagName(&apos;head&apos;)[0].appendChild(meta);&quot;];</div><div class="line">    [webView stringByEvaluatingJavaScriptFromString:jsMeta];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>改变webview样式（也是模式）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//JS改变外观</div><div class="line">   if (isNightView) &#123;</div><div class="line">       //字体大小</div><div class="line">       //[webView stringByEvaluatingJavaScriptFromString:@&quot;document.getElementsByTagName(&apos;body&apos;)[0].style.webkitTextSizeAdjust= &apos;330%&apos;&quot;];</div><div class="line">       //字体颜色</div><div class="line">       [webView stringByEvaluatingJavaScriptFromString:@&quot;document.getElementsByTagName(&apos;body&apos;)[0].style.webkitTextFillColor= &apos;white&apos;&quot;];</div><div class="line">       //页面背景色 3c3f43</div><div class="line">       [webView stringByEvaluatingJavaScriptFromString:@&quot;document.getElementsByTagName(&apos;body&apos;)[0].style.background=&apos;#000000&apos;&quot;];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>如发现本文侵犯了您的知识产权请马上通知我:<code>zyachao@163.com</code>，我将在第一时间删除！</p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webview添加缩放与外观样式&lt;/p&gt;
&lt;p&gt;1.设置属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>PlistBuddy的使用</title>
    <link href="https://devchao.com/2017/05/23/PlistBuddy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://devchao.com/2017/05/23/PlistBuddy的使用/</id>
    <published>2017-05-23T14:19:21.000Z</published>
    <updated>2017-05-23T14:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PlistBuddy的使用"><a href="#PlistBuddy的使用" class="headerlink" title="PlistBuddy的使用"></a>PlistBuddy的使用</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PlistBuddy是Mac系统自带的专门解析plist的小工具，可以很方便的对plist文件进行修改，对于批量修改plist是十分方便快捷的一种工具。</p>
<p>由于PlistBuddy并不在Mac默认的Path里，所以我们得通过绝对路径来引用这个工具：</p>
<p>查看帮助：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy --help</div></pre></td></tr></table></figure>
<p>新建plist文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/libexec/PlistBuddy testing.plist</div></pre></td></tr></table></figure>
<p>查看plist</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Command: Print</div><div class="line">Dict &#123;</div></pre></td></tr></table></figure>
<p>在第一层添加一个键值对</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Command: Add :Version string 1.0</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Version = 1.0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在改变它的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Command: Set :Version 1.1</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Version = 1.1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来我们将创建一个数组，并放入一些数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Command: Add :Applications array</div><div class="line">Command: Add :Applications: string app1</div><div class="line">Command: Add :Applications: string app2</div><div class="line">Command: Add :Applications: string app3</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Version = 1.1</div><div class="line">    Applications = Array &#123;</div><div class="line">        app1</div><div class="line">        app2</div><div class="line">        app3</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们也可以在数组索引为0的位置插入一些数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Command: Add :Applications:0 string app0a</div><div class="line">Command: Add :Applications:0 string app0b</div><div class="line">Command: Add :Applications:0 string app0c</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Version = 1.1</div><div class="line">    Applications = Array &#123;</div><div class="line">        app0c</div><div class="line">        app0b</div><div class="line">        app0a</div><div class="line">        app1</div><div class="line">        app2</div><div class="line">        app3</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们将删除一个条目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Command: Delete :Applications</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Version = 1.1</div></pre></td></tr></table></figure>
<p>现在让我们创建一个更为复杂的数据结构吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Command: Add :BrainCells integer 5</div><div class="line">Command: Add &quot;:Favourite Random Number&quot; real 3.9234</div><div class="line">Command: Add :Intelligent bool false</div><div class="line">Command: Add :Today date &quot;Sat Jun 27 18:51:00 AEST 2015&quot;</div><div class="line">Command: Add :Person dict</div><div class="line">Command: Add :Person:Name string &quot;Fotis Gimian&quot;</div><div class="line">Command: Add :Person:Occupation string &quot;Geek&quot;</div><div class="line">Command: Add :Person:Likes array</div><div class="line">Command: Add :Person:Likes: string Potatoes</div><div class="line">Command: Add :Person:Likes: string Apple</div><div class="line">Command: Add :Person:Likes: string Bouncing</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Favourite Random Number = 3.923400</div><div class="line">    Version = 1.1</div><div class="line">    Person = Dict &#123;</div><div class="line">        Likes = Array &#123;</div><div class="line">            Potatoes</div><div class="line">            Apple</div><div class="line">            Bouncing</div><div class="line">        &#125;</div><div class="line">        Name = Fotis Gimian</div><div class="line">        Occupation = Geek</div><div class="line">    &#125;</div><div class="line">    Intelligent = false</div><div class="line">    BrainCells = 5</div><div class="line">    Today = Sat Jun 27 18:51:00 AEST 2015</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在让我们调皮一下，让Microsoft取代Apple</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Command: Set :Person:Likes:1 Microsoft</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Favourite Random Number = 3.923400</div><div class="line">    Version = 1.1</div><div class="line">    Person = Dict &#123;</div><div class="line">        Likes = Array &#123;</div><div class="line">            Potatoes</div><div class="line">            Microsoft</div><div class="line">            Bouncing</div><div class="line">        &#125;</div><div class="line">        Name = Fotis Gimian</div><div class="line">        Occupation = Geek</div><div class="line">    &#125;</div><div class="line">    Intelligent = false</div><div class="line">    BrainCells = 5</div><div class="line">    Today = Sat Jun 27 18:51:00 AEST 2015</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们也可以打印一个子节点的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Command: Print :Person:Likes</div><div class="line">Array &#123;</div><div class="line">    Potatoes</div><div class="line">    Microsoft</div><div class="line">    Bouncing</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以使用索引移动到数组中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Command: Print :Person:Likes:1</div><div class="line">Microsoft</div></pre></td></tr></table></figure>
<p>当然了也可以使用冒号删除任何元组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Command: Delete :Person:Likes</div><div class="line">Command: Print</div><div class="line">Dict &#123;</div><div class="line">    Favourite Random Number = 3.923400</div><div class="line">    Version = 1.1</div><div class="line">    Person = Dict &#123;</div><div class="line">        Name = Fotis Gimian</div><div class="line">        Occupation = Geek</div><div class="line">    &#125;</div><div class="line">    Intelligent = false</div><div class="line">    BrainCells = 5</div><div class="line">    Today = Sat Jun 27 18:51:00 AEST 2015</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以保存我们的辛苦工作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Command: Save</div><div class="line">Saving...</div><div class="line">Command: Exit</div></pre></td></tr></table></figure>
<p>可以使用-c选项直接从CLI调用这些命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➔ /usr/libexec/PlistBuddy -c &quot;Print&quot; testing.plist</div><div class="line">Dict &#123;</div><div class="line">    Person = Dict &#123;</div><div class="line">        Name = Fotis Gimian</div><div class="line">        Occupation = Geek</div><div class="line">    &#125;</div><div class="line">    Intelligent = false</div><div class="line">    BrainCells = 5</div><div class="line">    Version = 1.1</div><div class="line">    Today = Sat Jun 27 18:51:00 AEST 2015</div><div class="line">    Favourite Random Number = 3.923400</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果您想修改应用程序提供的plist文件，则需要向PlistBuddy提供文件的完整路径名)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➔ /usr/libexec/PlistBuddy -c &quot;Print :magnification&quot; ~/Library/Preferences/com.apple.dock.plist</div><div class="line">true</div><div class="line">➔ /usr/libexec/PlistBuddy -c &quot;Set :magnification bool false&quot; ~/Library/Preferences/com.apple.dock.plist</div><div class="line">➔ /usr/libexec/PlistBuddy -c &quot;Print :magnification&quot; ~/Library/Preferences/com.apple.dock.plist</div><div class="line">false</div></pre></td></tr></table></figure>
<p>小窍门：命令（即 Print, Set, Add等）不区分大小写，因此您可以使用小写字母键入。</p>
<p>翻译自<a href="http://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/" target="_blank" rel="external">http://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/</a></p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PlistBuddy的使用&quot;&gt;&lt;a href=&quot;#PlistBuddy的使用&quot; class=&quot;headerlink&quot; title=&quot;PlistBuddy的使用&quot;&gt;&lt;/a&gt;PlistBuddy的使用&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; cla
    
    </summary>
    
    
      <category term="Linux" scheme="https://devchao.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>EFB总结与启发</title>
    <link href="https://devchao.com/2017/05/21/EFB%E6%80%BB%E7%BB%93%E4%B8%8E%E5%90%AF%E5%8F%91/"/>
    <id>https://devchao.com/2017/05/21/EFB总结与启发/</id>
    <published>2017-05-21T14:39:39.000Z</published>
    <updated>2017-05-21T15:00:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于现在公司EFB项目的问题，查阅相关资料后针对某些问题写下如下不成熟的解决方案和启发,抛砖引玉。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.不发布app如何修改已发布版本的bug？</p>
<p>使用<a href="https://jspatch.com/" target="_blank" rel="external">JSPatch</a>,其实现原理为：开发者编写JS代码，并将JS代码上传服务器，APP自动下载到本地，JSPatch Engine将JS代码转换为OC代码，然后执行，从而实现修复线上bug。</p>
<p>代码派发示意图如下：<br><img src="https://ws1.sinaimg.cn/large/00663vn1gy1fftb349t9oj30qy0ragn6.jpg" alt=""></p>
<p> 至于为什么选择JSPatch请看<a href="https://devchao.com/2017/05/21/App%E7%83%AD%E6%9B%B4%E6%96%B0%E4%B9%8BJSPatch/">这篇文章</a></p>
<p> 其中服务器如何下发JS代码有以下2种方案：</p>
<ul>
<li>App在每次激活或者启动时下载JS代码，下载完成后执行代码,修复线上Bug。</li>
<li>Server通过Apple的APNS服务器推送<a href="https://devchao.com/2017/04/24/Silent-Remote-Notification/">静默通知</a>,APP后台静默下载补丁文件，下载完成后执行代码，修补线上Bug。</li>
</ul>
<p><code>下发代码时可根据设备的UDID实现以航空公司为单位批量修复Bug,想想都高兴</code></p>
<p>2.如何实现在后台配置APP图标，app下载后设置app图标 ,从而实现让航空公司自己配置自己公司APP的图标？</p>
<ul>
<li>首先Apple是不允许APP加载Bundle外的图片的，并且APP的Bundle是只读的,所以要想实现后台配置APP的icon，app的icon文件必须在APP Bundle中.故不能通过后台配置app图标，app下载后，从而加载app Icon。</li>
<li>其次我们虽然不能通过后台配置app图标，app下载后设置app图标，但是Apple允许我们在bundle中配置多个app图标，然后在app中切换他们，基于这一点我们可以为各个航空公司配置多个App图标，根据各自的喜好选择适合自己的。iOS设置APP icon技术实现:<a href="https://devchao.com/2017/05/15/change-app-icon/">https://devchao.com/2017/05/15/change-app-icon/</a></li>
</ul>
<h2 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h2><p>事件：上次因为飞行员临时更换飞机号，然后下载完的放行资料机号和排班中机号不一致问题。单单从测试方面我受到的启发有以下2点：</p>
<blockquote>
<p>测试数据</p>
<ul>
<li>公司测试环境上的数据够真实，但覆盖不够全面，只有覆盖全面的数据，才能编写功能覆盖全面的测试用例。因此应该搭建一整套覆盖所有功能模块的覆盖全面的测试数据，而非和航空公司一致的真实数据。</li>
</ul>
<p>测试方案</p>
<ul>
<li>基于覆盖全面的数据之上，应该编写一整套每一个功能模块的测试用例，并整理归档，新添加功能时，将当前功能所需的<code>数据</code>和<code>操作步骤</code>记录整理归档，并将测试数据更新到测试数据库，依次类推。。。每次测试只需根据现有的测试用例测试即可将所有功能测试完善。这样以来下次测试时，测试任务就会十分清晰，测试覆盖的功能就会相当完善；对于新入职的测试员工能够减少一定的培训的成本，并且能够让测试对自己的工作内容变得十分清晰。 </li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于现在公司EFB项目的问题，查阅相关资料后针对某些问题写下如下不成熟的解决方案和启发,抛砖引玉。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;1.不发布app如何修改已
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>App热更新之JSPatch</title>
    <link href="https://devchao.com/2017/05/21/App%E7%83%AD%E6%9B%B4%E6%96%B0%E4%B9%8BJSPatch/"/>
    <id>https://devchao.com/2017/05/21/App热更新之JSPatch/</id>
    <published>2017-05-21T14:32:28.000Z</published>
    <updated>2017-05-21T14:42:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前有以下几种个人觉得比较好的热更新方案(原理都是通过JS代码调用OC代码)：</p>
<ul>
<li><p><a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React native</a>: ReactNative基于<a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a>,安装配置麻烦，React native官方中文网提供的热更新组件<a href="https://github.com/reactnativecn/react-native-pushy" target="_blank" rel="external">react-native-pushy</a>可便捷实现热更新。首先你需要有一个基于React Native开发的应用，如果没有可参见<a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html" target="_blank" rel="external">React native集成指南</a>集成到现有项目,再使用react-native-pushy。开发需要学习JSX模版。</p>
</li>
<li><p><a href="https://microsoft.github.io/code-push/docs/getting-started.html" target="_blank" rel="external">CodePush</a>: 针对<a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React native</a>和<a href="https://cordova.apache.org/" target="_blank" rel="external">Cordova</a>的热更新方案。</p>
</li>
<li><a href="https://weex.apache.org/cn/" target="_blank" rel="external">Weex</a>:weex基于<a href="https://cn.vuejs.org/" target="_blank" rel="external">vue.js</a>, weex安装cli之后就可以使用，开发语法类似于普通的html，样式直接使用CSS。集成到现有项目参见<a href="https://weex.apache.org/cn/guide/integrate-to-your-app.html" target="_blank" rel="external">集成 Weex 到已有应用</a></li>
<li><a href="https://jspatch.com/" target="_blank" rel="external">JPatch</a>: JSPatch 是一个开源项目(<a href="https://github.com/bang590/JSPatch" target="_blank" rel="external">Github链接</a>)，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。具有以下优点:安全、快速、实时、简单。并且有代码补全工具<a href="https://github.com/bang590/JSPatchX" target="_blank" rel="external">JSPatchX</a>、OC到JS代码转换工具<a href="https://bang590.github.io/JSPatchConvertor/" target="_blank" rel="external">JSPatchConvertor</a>。</li>
<li><a href="https://github.com/DynamicCocoa/DynamicCocoa" target="_blank" rel="external">DynamicCocoa</a>:滴滴iOS的一个框架，准备开源，与JSPatch比更加智能化，用OC在XCode中写完代码，用工具可以自动生成可以更新的js文件。</li>
</ul>
<p>关于JSPatch与React native的比较可参见<a href="https://blog.cnbang.net/tech/3237/" target="_blank" rel="external">这篇文章</a>。</p>
<p>由于React native接入的复杂性、学习成本高(JSX)，DynamicCocoa没有开源，Weex使用html、CSS编写，个人又对JS、Html不太熟练，所以比较推荐iOS前端开发者JSPatch.</p>
<h2 id="JSPatch线上修复Bug示意"><a href="#JSPatch线上修复Bug示意" class="headerlink" title="JSPatch线上修复Bug示意"></a>JSPatch线上修复Bug示意</h2><p><img src="https://ws1.sinaimg.cn/large/00663vn1gy1fftb349t9oj30qy0ragn6.jpg" alt=""></p>
<h2 id="JSPatch-简单用法"><a href="#JSPatch-简单用法" class="headerlink" title="JSPatch 简单用法"></a>JSPatch 简单用法</h2><p>例如线上 APP 有一段代码出现 bug 导致 crash：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@implementation JPTableViewController</div><div class="line">...</div><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">  NSString *content = self.dataSource[[indexPath row]];  //可能会超出数组范围导致crash</div><div class="line">  JPViewController *ctrl = [[JPViewController alloc] initWithContent:content];</div><div class="line">  [self.navigationController pushViewController:ctrl];</div><div class="line">&#125;</div><div class="line">...</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>可以通过下发这样一段 JS 代码，覆盖掉原方法，修复这个 bug：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//JS</div><div class="line">defineClass(&quot;JPTableViewController&quot;, &#123;</div><div class="line">  //instance method definitions</div><div class="line">  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) &#123;</div><div class="line">    var row = indexPath.row()</div><div class="line">    if (self.dataSource().length &gt; row) &#123;  //加上判断越界的逻辑</div><div class="line">      var content = self.dataArr()[row];</div><div class="line">      var ctrl = JPViewController.alloc().initWithContent(content);</div><div class="line">      self.navigationController().pushViewController(ctrl);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;, &#123;&#125;)</div></pre></td></tr></table></figure>
<p>其他高级用法详见<a href="https://github.com/bang590/JSPatch/wiki" target="_blank" rel="external">https://github.com/bang590/JSPatch/wiki</a></p>
<p><code>JSPatch</code> 提供了JSPatch SDK 提供了脚本后台托管，版本管理，保证传输安全等功能，让你无需搭建一个后台，无需关心部署操作，只需引入一个 SDK 即可立即使用 JSPatch,不过一些服务是收费的。</p>
<h2 id="JSPatch-SDK-与-github-上开源代码的关系？"><a href="#JSPatch-SDK-与-github-上开源代码的关系？" class="headerlink" title="JSPatch SDK 与 github 上开源代码的关系？"></a>JSPatch SDK 与 github 上开源代码的关系？</h2><p>Github 开源的是 JSPatch 核心代码，使用完全免费自由，若打算自己搭建后台下发 JSPatch 脚本，可以直接使用 github 上的核心代码，与 JSPatch 平台上的 SDK 无关。JSPatch 平台的 SDK 在核心代码的基础上增加了向平台请求脚本/传输解密/版本管理等功能，只用于这个平台。</p>
<p>##JSPatch SDK接入价格</p>
<p><img src="https://ws1.sinaimg.cn/large/00663vn1gy1ffsyhfflwcj31gy11o43t.jpg" alt="JSPatch价格"><br>觉得贵的可以搭建自己的后台。</p>
<p>本文摘录自：</p>
<ul>
<li><a href="https://facebook.github.io/react-native/" target="_blank" rel="external">https://facebook.github.io/react-native/</a></li>
<li><a href="https://microsoft.github.io/code-push/docs/getting-started.html" target="_blank" rel="external">https://microsoft.github.io/code-push/docs/getting-started.html</a></li>
<li><a href="https://weex.apache.org/cn/" target="_blank" rel="external">https://weex.apache.org/cn/</a></li>
<li><a href="https://jspatch.com/" target="_blank" rel="external">https://jspatch.com/</a></li>
</ul>
<p>如发现本文侵犯了您的知识产权请马上通知我:<code>zyachao@163.com</code>，我将在第一时间删除！</p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前有以下几种个人觉得比较好的热更新方案(原理都是通过JS代码调用OC代码)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo自定义网站升级为https</title>
    <link href="https://devchao.com/2017/05/20/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%AB%99%E5%8D%87%E7%BA%A7%E4%B8%BAhttps/"/>
    <id>https://devchao.com/2017/05/20/Hexo自定义网站升级为https/</id>
    <published>2017-05-20T05:09:20.000Z</published>
    <updated>2017-05-20T05:13:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近发现，各大网站好像已经开始全站使用HTTPS，看着浏览器地址栏左边有着一把绿色的小锁，好像是一件很酷的事情。国内的网络环境好像越来越差，除了学会科学上网之外，好像也难免会遇到通讯服务商在网站上加上小广告的问题。随着不断了解计算机的知识，安全概念也越来越重。看着某某网站又被脱裤，一不小心自己的隐私可能就泄露出去了。今天是周末，也想给自己的博客加上把绿色的小锁HTTPS。</p>
<h2 id="什么是HTTPS"><a href="#什么是HTTPS" class="headerlink" title="什么是HTTPS"></a>什么是HTTPS</h2><p>HTTPS全称Hypertext Transfer Protocol Secure 超文本安全协议。也就是HTTP加上安全传输层协议TSL/SSL。介于HTTP层与TCP层之间的一层安全协议。通过安全认证，可以避免HTTP中间人攻击，信息污染，信息劫持等问题。详细信息的话腾讯Bugly的文章<a href="https://segmentfault.com/a/1190000004199917" target="_blank" rel="external">全站HTTPS</a>来了介绍得很详细。HTTPS基础原理，通信过程，在这篇文章里都有详细地讲到。</p>
<h2 id="给博客加上HTTPS"><a href="#给博客加上HTTPS" class="headerlink" title="给博客加上HTTPS"></a>给博客加上HTTPS</h2><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>通过上述的HTTPS介绍，可以知道如果我们要给让博客的协议变成HTTPS，就需要有CA认可的证书才可以，一般这样子的证书是需要自己进行购买和申请认证的。简单RSA非对称性的加密算法是无法避免中间人攻击的。存在着中间人攻击和信息抵赖的风险。所以我这里所采用的方法是用，<a href="https://www.cloudflare.com/" target="_blank" rel="external">Cloudflare</a>所提供的CDN来作为HTTPS的接入口。</p>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>什么是CDN? CDN的全称就是Content Delivery Network，内容分发网络。其最基本的思路就是，用户在访问一个网站的时候，不直接访问这个网站的服务器，CDN系统会根据地理位置，将用户重新导向离其最近的CDN服务器。网站的内容在这个CDN服务器上会有相应的缓存，从而使用户更快地访问到所需要的内容，可以减少网络拥堵的情况，也可以减轻网站的服务器承受太大的访问量，以及带宽不足的情况。</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><ul>
<li>注册Cloudflare，添加个人网站，根据指引一步步添加自己的网站。</li>
<li>获取Cloudflare的<code>Domain Name Server</code>。(<code>alla.ns.cloudflare.com</code>和<code>vin.ns.cloudflare.com</code>)</li>
<li>在域名提供商处修改自己域名的<code>Domain Name Server</code>为2所获取的DNS</li>
<li><p>在Cloudflare &gt; DNS中添加三条如下记录：<br><img src="https://ws1.sinaimg.cn/large/00663vn1gy1ffrlruphkwj31i40c0jt7.jpg" alt=""></p>
<ul>
<li>A记录: 将一个域名指向一个ipv4的地址</li>
<li>AAAA记录: 将一个域名指向一个ipv6的地址</li>
<li>CNAME记录: 将一个域名指向另一个域名</li>
</ul>
<p><code>PS: 填写A记录时Name字段输入@就会显示为你的网址,我的是devchao.com,CNAME字段的Value字段需要填写为你需要只想的域名</code></p>
</li>
<li>更改Cloudflare &gt; Crypto &gt; SSL 选择 <code>Flexible</code>。(加密方式有三种：Flexible、Full SSL 、 Full SSL(strict),这里选择Flexible)</li>
<li>更改Cloudflare &gt; Crypto &gt; Automatic HTTPS Rewrites 打开开关</li>
</ul>
<h4 id="flexible的SSL加密方式解析"><a href="#flexible的SSL加密方式解析" class="headerlink" title="flexible的SSL加密方式解析"></a>flexible的SSL加密方式解析</h4><blockquote>
<p>There is an encrypted connection between your website visitors and Cloudflare, but not from Cloudflare to your server.</p>
<ul>
<li>There is an encrypted connection between your website visitors and Cloudflare, but not from Cloudflare to your server.</li>
<li>Visitors will see the SSL lock icon in their browser</li>
</ul>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/large/00663vn1gy1ffrm2v8xz7j316i0r2q7a.jpg" alt=""></p>
<p><code>Flexible SSL</code> : 服务器与CDN在通信过程中的信息是没有加密的,因为我使用的git page 以及没有购买相应的证书，所以没法再服务器上部署SSL。所以CDN与服务器之间的通信就不是加密的通信。</p>
<ul>
<li>在cloudflare上的Page Rules设置中，添加上一条规则使得通过http协议的访问也会强制跳转到https上。<br><img src="https://ws1.sinaimg.cn/large/00663vn1gy1ffrm9w3d5nj317s0okad7.jpg" alt=""></li>
</ul>
<h3 id="全站https"><a href="#全站https" class="headerlink" title="全站https"></a>全站https</h3><p>要做到成功让这个博客满足https的要求，在博客所使用所有的图片自然也是要使用https的链接才行的，只要网站上所使用的资源不是全部通过https的就存在着安全的风险。且网站会被chrome等浏览器认为是不安全的。</p>
<p>这里所使用的是新浪微博的图床，在chrome商店可以找到对应的插件。在左下角有的https的选项，只要勾选上了就可以默认生成https的图片链接了。<br><img src="https://ws1.sinaimg.cn/large/00663vn1gy1ffrmfntohij31860u8whj.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近发现，各大网站好像已经开始全站使用HTTPS，看着浏览器地址栏左边有着一把绿色的小锁，好像是一件很酷的事情。国内的网络环境好像越来越差，
    
    </summary>
    
    
      <category term="Hexo" scheme="https://devchao.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>change-app-icon</title>
    <link href="https://devchao.com/2017/05/15/change-app-icon/"/>
    <id>https://devchao.com/2017/05/15/change-app-icon/</id>
    <published>2017-05-15T05:39:23.000Z</published>
    <updated>2017-05-15T06:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="change-app-icon"><a href="#change-app-icon" class="headerlink" title="change app icon"></a>change app icon</h1><p>本文教成将会一步步教你如何改变app图标，以下面两张图标(newicon2.png <code>120px X 120px</code> , newicon@2x.png <code>180px X 180px</code>)为例。</p>
<p><img src="http://7xiwr4.com1.z0.glb.clouddn.com/newicon2.png" alt="newicon2"></p>
<p><img src="http://7xiwr4.com1.z0.glb.clouddn.com/newicon@2x.png" alt="newicon"></p>
<hr>
<p><strong>1.设置plist:在info-plsit中的Source Code中添加如下键值对。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;CFBundleIcons&lt;/key&gt;</div><div class="line">	&lt;dict&gt;</div><div class="line">		&lt;key&gt;CFBundleAlternateIcons&lt;/key&gt;</div><div class="line">		&lt;dict&gt;</div><div class="line">			&lt;key&gt;newicon&lt;/key&gt;</div><div class="line">			&lt;dict&gt;</div><div class="line">				&lt;key&gt;CFBundleIconFiles&lt;/key&gt;</div><div class="line">				&lt;array&gt;</div><div class="line">					&lt;string&gt;newicon&lt;/string&gt;</div><div class="line">				&lt;/array&gt;</div><div class="line">				&lt;key&gt;UIPrerenderedIcon&lt;/key&gt;</div><div class="line">				&lt;false/&gt;</div><div class="line">			&lt;/dict&gt;</div><div class="line">			&lt;key&gt;newicon2&lt;/key&gt;</div><div class="line">			&lt;dict&gt;</div><div class="line">				&lt;key&gt;CFBundleIconFiles&lt;/key&gt;</div><div class="line">				&lt;array&gt;</div><div class="line">					&lt;string&gt;newicon2&lt;/string&gt;</div><div class="line">				&lt;/array&gt;</div><div class="line">				&lt;key&gt;UIPrerenderedIcon&lt;/key&gt;</div><div class="line">				&lt;false/&gt;</div><div class="line">			&lt;/dict&gt;</div><div class="line">		&lt;/dict&gt;</div><div class="line">		&lt;key&gt;CFBundlePrimaryIcon&lt;/key&gt;</div><div class="line">		&lt;dict&gt;</div><div class="line">			&lt;key&gt;CFBundleIconFiles&lt;/key&gt;</div><div class="line">			&lt;array&gt;</div><div class="line">				&lt;string&gt;&lt;/string&gt;</div><div class="line">			&lt;/array&gt;</div><div class="line">			&lt;key&gt;UIPrerenderedIcon&lt;/key&gt;</div><div class="line">			&lt;false/&gt;</div><div class="line">		&lt;/dict&gt;</div><div class="line">	&lt;/dict&gt;</div></pre></td></tr></table></figure>
<p>配置好的Property plsit如下图:</p>
<p><img src="http://7xiwr4.com1.z0.glb.clouddn.com/changeAppIconPlist.png" alt="plist"></p>
<p><code>解释</code></p>
<ul>
<li>CFBundleAlternateIcons 代表要修改的图标键，是一个字典类型，其中的每一个字典代表一个item的描述。<code>并且这个字典的key必须是图片的名字，还要和CFBundleIconFiles的内容一样</code></li>
<li>UIPrerenderedIcon：指定应用程序的图标是否包含闪光效果（shine effect）,如果icon已经有这个效果，就把这个属性设置为YES来防止系统再次添加相同效果。如果设置为NO（默认值），iOS系统会自动添加这个效果。然而，并没有什么效果!!</li>
<li>CFBundleIcons 配置app的图标。如果你要适配ipad需要在plist中再次加入CFBundleIcons~ipad键，其他配置同上。</li>
</ul>
<p>我配置好的plist如下所示：</p>
<p><img src="http://7xiwr4.com1.z0.glb.clouddn.com/yachaocn-plist-appicon-ipad.png" alt="iapd-plist"></p>
<p><strong>2.调用Apple的API</strong></p>
<p>新建一个Single view application,在ViewController的View上添加一个Button添加一个事件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">- (IBAction)changeAppIcon:(id)sender &#123;</div><div class="line">    UIButton *button = (UIButton *)sender;</div><div class="line">    button.selected = !button.selected;</div><div class="line">    if (![self checkSuportChangeAppIcon]) &#123;//检查设备系统版本是否是iOS 10.3之后的</div><div class="line">        [self alertMessage:@&quot;Your system version was lower iOS 10.3.0,don&apos;t surport change app icon.&quot;];</div><div class="line">    &#125;</div><div class="line">    if (![UIApplication sharedApplication].supportsAlternateIcons) &#123;//检查app是否支持改变app icon</div><div class="line">         [self alertMessage:@&quot;Your application don&apos;t surport change app icon.&quot;];</div><div class="line">    &#125;</div><div class="line">    NSString *icon = button.selected ? @&quot;newicon&quot; : @&quot;newicon2&quot;;</div><div class="line">    </div><div class="line">    [self changeToIcon:icon];//该变app icon</div><div class="line">    </div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">-(BOOL)checkSuportChangeAppIcon</div><div class="line">&#123;</div><div class="line">    NSString * systemVersion = [UIDevice currentDevice].systemVersion;</div><div class="line">    if ([systemVersion floatValue] &gt;= 10.3f) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> 改变app icon</div><div class="line"></div><div class="line"> @param icon iconName</div><div class="line"> */</div><div class="line">-(void)changeToIcon:(NSString *)icon</div><div class="line">&#123;</div><div class="line">    [[UIApplication sharedApplication] setAlternateIconName:icon completionHandler:^(NSError * _Nullable error) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            [self alertMessage:error.description];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)alertMessage:(NSString *)message</div><div class="line">&#123;</div><div class="line">    UIAlertController *alertVC = [UIAlertController alertControllerWithTitle:@&quot;提示&quot; message:message preferredStyle:UIAlertControllerStyleAlert];</div><div class="line">    UIAlertAction *action = [UIAlertAction actionWithTitle:@&quot;好的&quot; style:UIAlertActionStyleDefault handler:nil];</div><div class="line">    [alertVC addAction:action];</div><div class="line">    [self presentViewController:alertVC animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://7xiwr4.com1.z0.glb.clouddn.com/ModifyAppIcons.zip" target="_blank" rel="external">下载代码</a></p>
<p>参考:</p>
<ul>
<li><a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/TP40009249-SW13" target="_blank" rel="external">官方文档</a></li>
<li><a href="http://www.cocoachina.com/ios/20170502/19152.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20170502/19152.html</a></li>
</ul>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;change-app-icon&quot;&gt;&lt;a href=&quot;#change-app-icon&quot; class=&quot;headerlink&quot; title=&quot;change app icon&quot;&gt;&lt;/a&gt;change app icon&lt;/h1&gt;&lt;p&gt;本文教成将会一步步教你如何改变app
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>CADisplayLink</title>
    <link href="https://devchao.com/2017/05/03/CADisplayLink/"/>
    <id>https://devchao.com/2017/05/03/CADisplayLink/</id>
    <published>2017-05-03T05:59:39.000Z</published>
    <updated>2017-05-03T06:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CADisplayLink"><a href="#CADisplayLink" class="headerlink" title="CADisplayLink"></a>CADisplayLink</h1><hr>
<p>##什么是CADisplayLink</p>
<p><code>CADisplayLink</code>是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。我们在应用中创建一个新的 <code>CADisplayLink</code> 对象，把它添加到一个<code>runloop</code>中，并给它提供一个 <code>target</code> 和<code>selector</code> 在屏幕刷新的时候调用。</p>
<p>一但 <code>CADisplayLink</code> 以特定的模式注册到<code>runloop</code>之后，每当屏幕需要刷新的时候，<code>runloop</code>就会调用<code>CADisplayLink</code>绑定的<code>target</code>上的<code>selector</code>，这时<code>target</code>可以读到 <code>CADisplayLink</code> 的每次调用的时间戳，用来准备下一帧显示需要的数据。例如一个视频应用使用时间戳来计算下一帧要显示的视频数据。在UI做动画的过程中，需要通过时间戳来计算UI对象在动画的下一帧要更新的大小等等。</p>
<p>在添加进<code>runloop</code>的时候我们应该选用高一些的优先级，来保证动画的平滑。可以设想一下，我们在动画的过程中，<code>runloop</code>被添加进来了一个高优先级的任务，那么，下一次的调用就会被暂停转而先去执行高优先级的任务，然后在接着执行<code>CADisplayLink</code>的调用，从而造成动画过程的卡顿，使动画不流畅。</p>
<p><code>duration</code>属性提供了每帧之间的时间，也就是屏幕每次刷新之间的的时间。我们可以使用这个时间来计算出下一帧要显示的UI的数值。但是<code>duration</code>只是个大概的时间，如果CPU忙于其它计算，就没法保证以相同的频率执行屏幕的绘制操作，这样会跳过几次调用回调方法的机会。</p>
<p><code>frameInterval</code>属性是可读可写的<code>NSInteger</code>型值，标识间隔多少帧调用一次<code>selector</code> 方法，默认值是<code>1</code>，即每帧都调用一次。如果每帧都调用一次的话，对于iOS设备来说那刷新频率就是60HZ也就是每秒60次，如果将 <code>frameInterval</code> 设为2 那么就会两帧调用一次，也就是变成了每秒刷新30次。<br>我们通过<code>pause</code>属性开控制<code>CADisplayLink</code>的运行。当我们想结束一个<code>CADisplayLink</code>的时候，应该调用<code>-(void)invalidate</code><br>从<code>runloop</code>中删除并删除之前绑定的 <code>target</code>跟<code>selector</code><br>另外<code>CADisplayLink</code> 不能被继承。</p>
<p>##CADisplayLink 与 NSTimer 有什么不同</p>
<p>iOS设备的屏幕刷新频率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。</p>
<p><code>NSTimer</code>的精确度就显得低了点，比如<code>NSTimer</code>的触发时间到的时候，<code>runloop</code>如果在阻塞状态，触发时间就会推迟到下一个<code>runloop</code>周期。并且 <code>NSTimer</code>新增了<code>tolerance</code>属性，让用户可以设置可以容忍的触发的时间的延迟范围。</p>
<p><code>CADisplayLink</code>使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用 <code>CADisplayLink</code>比起用<code>NSTimer</code>的好处就是我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p>
<p>##CADisplayLink使用的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">self.displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(updateTextColor)];</div><div class="line">self.displayLink.paused = YES;</div><div class="line">[self.displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSRunLoopCommonModes];</div><div class="line">-(void)updateTextColor&#123;&#125;</div><div class="line">- (void)startAnimation&#123;</div><div class="line">   self.beginTime = CACurrentMediaTime();</div><div class="line">   self.displayLink.paused = NO;</div><div class="line">&#125;</div><div class="line">- (void)stopAnimation&#123;</div><div class="line">  self.displayLink.paused = YES;</div><div class="line">  [self.displayLink invalidate];</div><div class="line">  self.displayLink = nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##给非UI对象添加动画效果</p>
<p>我们知道动画效果就是一个属性的线性变化，比如UIView 动画的 EasyIn EasyOut 。通过数值按照不同速率的变化我们能生成更接近真实世界的动画效果。我们也可以利用这个特性来使一些其他属性按照我们期望的曲线变化。比如当播放视频时关掉视频的声音我可以通过CADisplayLink来实现一个 EasyOut的渐出效果：先快速的降低音量，在慢慢的渐变到静音。</p>
<p>##注意</p>
<p>通常来讲：iOS设备的刷新频率事60HZ也就是每秒60次。那么每一次刷新的时间就是1/60秒 大概16.7毫秒。当我们的frameInterval值为1的时候我们需要保证的是 CADisplayLink调用的｀target｀的函数计算时间不应该大于 16.7否则就会出现严重的丢帧现象。</p>
<p>在mac应用中我们使用的不是CADisplayLink而是 CVDisplayLink它是基于C接口的用起来配置有些麻烦但是用起来还是很简单的。</p>
<p><a href="https://developer.apple.com/library/ios/samplecode/AVBasicVideoOutput/Introduction/Intro.html#//apple_ref/doc/uid/DTS40013109" target="_blank" rel="external">apple官方DEMO</a></p>
<p><a href="https://developer.apple.com/library/ios/documentation/QuartzCore/Reference/CADisplayLink_ClassRef/index.html" target="_blank" rel="external">CADisplayLink Class Reference</a></p>
<p><a href="https://github.com/zipme/RQShineLabel" target="_blank" rel="external">一个文字渐变效果的动画开源库</a></p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CADisplayLink&quot;&gt;&lt;a href=&quot;#CADisplayLink&quot; class=&quot;headerlink&quot; title=&quot;CADisplayLink&quot;&gt;&lt;/a&gt;CADisplayLink&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;##什么是CADisplayLink&lt;/p
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Silent-Remote-Notification</title>
    <link href="https://devchao.com/2017/04/24/Silent-Remote-Notification/"/>
    <id>https://devchao.com/2017/04/24/Silent-Remote-Notification/</id>
    <published>2017-04-24T04:59:38.000Z</published>
    <updated>2017-04-24T05:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-Silent-Remote-Notification"><a href="#iOS-Silent-Remote-Notification" class="headerlink" title="iOS Silent Remote Notification"></a>iOS Silent Remote Notification</h1><p>###官方是这么概述的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Silent notifications improve the user experience by helping you keep your app up-to-date, even when it is not running. When apps do not run for extended periods of time, their data can become outdated. When the user finally launches the app again, the outdated data must be replaced, which can cause a delay in using the app. Silent notifications give you a way to wake up your app periodically so that it can refresh its data in the background.</div></pre></td></tr></table></figure>
<p>大概意思是说：当app处于前台、后台、甚至不再运行时，静默通知都可以实时更新你的APP，以此来提高用户的体验。当app很长一段时间不再运行时，他的数据就回变旧，此时当用户进入你的app中时，旧的数据需要被替换掉，这会让用户等待，降低了用户体验。怎么解决这个问题呢？静默通知可以解决。静默通知可以定期唤醒你的app,以便与可以在后台刷新数据。</p>
<p><code>IMPORTANT:静音通知并不意味着可以保持您的应用在后台醒来后一直处于后台，也不用于高优先级更新。 APN将无声通知视为低优先级，并且如果总数变得过多，则可以完全抑制它们的传送。实际的限制是动态的，可以根据条件改变，但尽量不要每小时发送多个通知</code></p>
<p>发送静默通知需要对通知的有效内容进行特殊配置。如果您payload(后台推送内容)未正确配置，通知可能会显示给用户，而不是在后台传递到您的应用程序。payload配置如下：</p>
<ul>
<li>payload的<code>aps</code>字典必须包含<code>content-available</code>键，并且其值必须为1；</li>
<li>payload的<code>aps</code>字典禁止包含alert, sound,活着 badge键</li>
</ul>
<p><strong>静默通知payload实例</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;aps&quot; : &#123;</div><div class="line">        &quot;content-available&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &quot;acme1&quot; : &quot;bar&quot;,</div><div class="line">    &quot;acme2&quot; : 42</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">**正常通知payload实例**</div></pre></td></tr></table></figure>
<p>{<br>    “aps” : {<br>        “alert” : {<br>            “title” : “Game Request”,<br>            “body” : “Bob wants to play poker”,<br>            “action-loc-key” : “PLAY”<br>        },<br>        “badge” : 5<br>    },<br>    “acme1” : “bar”,<br>    “acme2” : [ “bang”,  “whiz” ]<br>}</p>
<p>或：</p>
<p>{<br>    “aps” : {<br>        “alert” : “You got your emails.”,<br>        “badge” : 9,<br>        “sound” : “bingbong.aiff”<br>    },<br>    “acme1” : “bar”,<br>    “acme2” : 42<br>}</p>
<p>```</p>
<p>当静默通知被传送给app后，iOS会在后台唤醒你的app，并给出30秒时间去运行，在iOS系统中，系统将会通过app代理调用<code>application:didReceiveRemoteNotification:fetchCompletionHandler:</code>来传送静默通知，使用该方法启动获取新数据所需的一些下载操作。在后台处理远程通知需要您向应用程序添加适当的后台模式。</p>
<p>####将应用配置为在后台处理无提示通知</p>
<p>1.在Project Navigator中选中你的项目。</p>
<p>2.在editor中选中你的target。</p>
<p>3.选中Capabilities。</p>
<p>4.打开Background Modes开关。</p>
<p>5.勾选Remote notifications复选框。</p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS-Silent-Remote-Notification&quot;&gt;&lt;a href=&quot;#iOS-Silent-Remote-Notification&quot; class=&quot;headerlink&quot; title=&quot;iOS Silent Remote Notification&quot;&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Apache服务配置</title>
    <link href="https://devchao.com/2017/04/15/Apache%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
    <id>https://devchao.com/2017/04/15/Apache服务配置/</id>
    <published>2017-04-15T02:04:35.000Z</published>
    <updated>2017-04-15T04:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-OS-Apache-服务配置"><a href="#Mac-OS-Apache-服务配置" class="headerlink" title="Mac OS Apache 服务配置"></a>Mac OS Apache 服务配置</h1><p><strong>Apache 所在位置</strong>:<code>/etc/apache2</code></p>
<p><strong>Apache 配置文件所在位置</strong>:<code>/etc/apache2/httpd.conf</code></p>
<p>###apache下部署web资源</p>
<p>跟windows不一样，它的部署包不是放在htdocs(windows下的存放目录),而是放在 “/资源库/WebServer/Documents/”下面,我们的静态资源就可以丢到这个目录.这个目录是apache的默认目录，有时候为了方便操作，可能需要指向特定的文件夹，该如何修改apache的配置呢？</p>
<p>###修改默认部署路径</p>
<p>找到Apache配置文件中的<code>DocumentRoot</code>,将其配置目录改为制定路径即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DocumentRoot /Library/WebServer/Documents</div></pre></td></tr></table></figure>
<p>###修改apache默认端口<br>找到Apache配置文件中<code>Listen</code>,更改为想要的端口即可。 </p>
<p>###启动停用apache</p>
<p>启用apache的命令：<code>sudo apachectl start/restart</code></p>
<p>在浏览器中输入localhost或者127.0.0.1即可看到“It works!”的提示。那么，apache就启动成功了！</p>
<p>停止apache的命令：<code>sudo apachectl stop</code></p>
<p>apache的用法还有非常多，比如 转发配置、ssl配置、日志配置，以后慢慢补充～</p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mac-OS-Apache-服务配置&quot;&gt;&lt;a href=&quot;#Mac-OS-Apache-服务配置&quot; class=&quot;headerlink&quot; title=&quot;Mac OS Apache 服务配置&quot;&gt;&lt;/a&gt;Mac OS Apache 服务配置&lt;/h1&gt;&lt;p&gt;&lt;stron
    
    </summary>
    
    
      <category term="Linux" scheme="https://devchao.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>内敛函数</title>
    <link href="https://devchao.com/2017/04/10/%E5%86%85%E6%95%9B%E5%87%BD%E6%95%B0/"/>
    <id>https://devchao.com/2017/04/10/内敛函数/</id>
    <published>2017-04-10T09:52:18.000Z</published>
    <updated>2017-04-10T09:59:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内联函数inline"><a href="#内联函数inline" class="headerlink" title="内联函数inline"></a>内联函数inline</h1><p><code>参考资料</code></p>
<p><a href="http://www.jianshu.com/p/d557b0831c6a" target="_blank" rel="external">http://www.jianshu.com/p/d557b0831c6a</a></p>
<p><a href="http://www.blogfshare.com/ioss-static-inline.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-static-inline.html</a></p>
<p><a href="http://www.blogfshare.com/ioss-static-inline.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-static-inline.html</a></p>
<p><code>例：</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static inline UIBarButtonItem *UIBarButtonWithFixedWidth(CGFloat with)</div><div class="line">&#123;</div><div class="line">    UIBarButtonItem *button = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace target:nil action:nil];</div><div class="line">    button.width = with;</div><div class="line">    return button;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>概述：</code></p>
<p>内联函数是一种小型函数，是以空间换效率的函数，功能较简单，他能够替代宏，static inline通常用于修饰函数或者方法，用于解决函数调用的效率问题：</p>
<ul>
<li><p>函数调用是内存地址之间通过call的方式调用,当函数调用完毕之后还会返回原来函数执行的地址,函数调用有时间开销, 汇编时会出现 call 指令.调用call指令就是就需要：</p>
<ul>
<li>(1)将下一条指令的所在地址入栈</li>
<li>(2)并将子程序的起始地址送入PC（于是CPU的下一条指令就会转去执行子程序）</li>
</ul>
</li>
<li><p>以inline的方式编译的会，会把该函数的code拷贝到每次调用该函数的地方。而static会让生成的二进制文件中没有清晰的符号表，让逆向的人很难弄清楚逻辑。</p>
</li>
</ul>
<p>inline 的优点：</p>
<p><strong><code>相比函数</code></strong></p>
<ul>
<li><p>inline函数避免了普通函数的,在汇编时必须调用call的缺点:取消了函数的参数压栈，减少了调用的开销,提高效率.所以执行速度确比一般函数的执行速度要快.</p>
</li>
<li><p>集成了宏的优点,使用时直接用代码替换(像宏一样);</p>
</li>
<li>以inline的方式编译的会，会把该函数的code拷贝到每次调用该函数的地方。而static会让生成的二进制文件中没有清晰的符号表，让逆向的人很难弄清楚逻辑。</li>
</ul>
<p><strong><code>相比宏</code></strong></p>
<ul>
<li><p>避免了宏的缺点:需要预编译.因为inline内联函数也是函数,不需要预编译.</p>
</li>
<li><p>编译器在调用一个内联函数时，会首先检查它的参数的类型，保证调用正确。然后进行一系列的相关检查，就像对待任何一个真正的函数一样。这样就消除了它的隐患和局限性。</p>
</li>
<li><p>可以使用所在类的保护成员及私有成员</p>
</li>
</ul>
<p><code>使用内敛函数注意事项：</code></p>
<ul>
<li>内联函数只是我们向编译器提供的申请,编译器不一定采取inline形式调用函数.</li>
<li>内联函数不能承载大量的代码.如果内联函数的函数体过大,编译器会自动放弃内联.</li>
<li>内联函数内不允许使用循环语句或开关语句.</li>
<li>内联函数的定义须在调用之前.</li>
</ul>
<hr>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内联函数inline&quot;&gt;&lt;a href=&quot;#内联函数inline&quot; class=&quot;headerlink&quot; title=&quot;内联函数inline&quot;&gt;&lt;/a&gt;内联函数inline&lt;/h1&gt;&lt;p&gt;&lt;code&gt;参考资料&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>MAC SSH 服务</title>
    <link href="https://devchao.com/2017/03/28/MAC-SSH-%E6%9C%8D%E5%8A%A1/"/>
    <id>https://devchao.com/2017/03/28/MAC-SSH-服务/</id>
    <published>2017-03-28T06:23:23.000Z</published>
    <updated>2017-03-28T06:23:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MAC-SSH-服务"><a href="#MAC-SSH-服务" class="headerlink" title="MAC SSH 服务"></a>MAC SSH 服务</h1><p>SSH（Secure Shell）是一种通用的、功能强大的、基于软件的网络安全解决方案。计算机每次向网络发送数据时，SSH都会自动对其进行加密。运行 OS X 又或者是 macOS 的较新 Mac 设备都会默认预装 SSH，不过 SSH 守护进程是默认禁用的。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p><code>Mac Terminal是自带SSH的，可以用whereis来看看：</code></p>
<pre><code>$ whereis ssh
</code></pre><p>但是在现有进程中找不到ssh对应的进程：</p>
<pre><code>$ ps aux | grep ssh
yachaocn          9043   0.0  0.0  2434840    764 s001  R+    3:52下午   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn ssh
</code></pre><p>直接用ssh命令连接本地主机或远程主机时会遇到下列错误提示：</p>
<pre><code>ssh: connect to host localhost port 22: Connection refused
</code></pre><p><strong>解决办法:</strong></p>
<p> 在系统偏好设置》共享》勾选‘远程登陆’或者 终端键入如下命令:</p>
<p><code>查看SSH服务状态</code></p>
<pre><code>$ sudo systemsetup -getremotelogin
</code></pre><p><code>快速开启 SSH 服务器并允许 SSH 连接进入当前 Mac</code></p>
<pre><code>$ sudo systemsetup -setremotelogin on
</code></pre><p>输入指令后并没有任何确认信息表明远程登录和 SSH 已经开启，但你可以使用上文提到的方法来检查是否开启成功。</p>
<p><code>通过终端指令关闭Mac的SSH,并阻止远程连接</code></p>
<pre><code>$ sudo systemsetup -setremotelogin off
</code></pre><blockquote>
<p>使用</p>
</blockquote>
<p><code>ssh链接远程电脑</code></p>
<pre><code>ssh username@192.168.100.100
</code></pre><p>username ： 登录的主机的用户名</p>
<p>192.168.100.100 ：要登录的主机的IP地址</p>
<p><code>scp远程copy文件</code></p>
<pre><code>scp .zshrc username@192.168.100.100:/Users/username/
</code></pre><p>将当前路径下的.zshrc文件复制到远程主机的/Users/username目录下。</p>
<p><strong>具体用法参见</strong><br><a href="http://yachaocn.com/2017/03/23/Linux-cp%E5%92%8Cscp%E5%91%BD%E4%BB%A4/" target="_blank" rel="external">cp和scp用法</a></p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MAC-SSH-服务&quot;&gt;&lt;a href=&quot;#MAC-SSH-服务&quot; class=&quot;headerlink&quot; title=&quot;MAC SSH 服务&quot;&gt;&lt;/a&gt;MAC SSH 服务&lt;/h1&gt;&lt;p&gt;SSH（Secure Shell）是一种通用的、功能强大的、基于软件的网络安
    
    </summary>
    
    
      <category term="Linux" scheme="https://devchao.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>毛玻璃效果的实现</title>
    <link href="https://devchao.com/2017/03/23/%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://devchao.com/2017/03/23/毛玻璃效果的实现/</id>
    <published>2017-03-23T09:36:03.000Z</published>
    <updated>2017-03-23T09:36:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>####制作毛玻璃效果</p>
<p>1.加入属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, strong) UIVisualEffectView *visualEfView;</div></pre></td></tr></table></figure>
<p>2.添加图片</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height)];</div><div class="line">    [imageView setImage:[UIImage imageNamed:@&quot;1.jpg&quot;]];</div></pre></td></tr></table></figure>
<p>3.添加毛玻璃效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">self.visualEfView = [[UIVisualEffectView alloc] initWithEffect:[UIBlurEffect effectWithStyle:UIBlurEffectStyleLight]];</div><div class="line">    _visualEfView.frame = CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height/2);</div><div class="line">    _visualEfView.alpha = 0.9;</div><div class="line">    [imageView addSubview:_visualEfView];</div><div class="line">    </div><div class="line">    [self.view addSubview:imageView];</div></pre></td></tr></table></figure>
<p><strong>运行试一下吧</strong></p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####制作毛玻璃效果&lt;/p&gt;
&lt;p&gt;1.加入属性&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux cp和scp命令</title>
    <link href="https://devchao.com/2017/03/23/Linux-cp%E5%92%8Cscp%E5%91%BD%E4%BB%A4/"/>
    <id>https://devchao.com/2017/03/23/Linux-cp和scp命令/</id>
    <published>2017-03-23T09:31:58.000Z</published>
    <updated>2017-03-23T09:32:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-cp和scp命令"><a href="#Linux-cp和scp命令" class="headerlink" title="Linux cp和scp命令"></a>Linux cp和scp命令</h1><p>Linux为我们提供了两个用于文件copy的命令，一个是cp，一个是scp，但是他们略有不同:</p>
<ul>
<li>cp — 主要是用于在同一台电脑上，在不同的目录之间来回copy文件 </li>
<li>scp — 主要是在不同的Linux系统之间来回copy文件 </li>
</ul>
<p>##cp<br></p>
<p>详细见</p>
<pre><code>$ man 1 cp
</code></pre><p>cp [OPTIONS] SOURCE DEST — 从源路径copy文件到目的路径 </p>
<p>cp [OPTIONS] SOURCE… DIRECTORY — 将多个源文件copy到指定的目录（多个源文件用空格分隔</p>
<p><code>OPTIONS：</code> </p>
<p><code>-a</code> same as -dpR 尽可能将源文件状态、权限等资料都照原装予以复制，并且是递归copy；</p>
<p><code>-r</code> 表示递归copy，若source中含有目录名，则将目录下之档案亦皆依序拷贝至目的地； </p>
<p><code>-f</code> 表示force，若目的地已经有相同档名的档案存在，则在复制前先予以删除再行复制； </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">范例： </div><div class="line"></div><div class="line">1. 将档案 aaa 复制(已存在)，并命名为 bbb： </div><div class="line">cp aaa bbb </div><div class="line">2. 将所有的C语言程式拷贝至 Finished 子目录中： </div><div class="line">cp *.c Finished/</div></pre></td></tr></table></figure>
<p>##scp<br><br><br>scp是有Security的文件copy，基于ssh登录。操作起来比较方便，比如要把当前一个文件copy到远程另外一台主机上，可以如下命令：</p>
<pre><code>$scp /home/daisy/full.tar.gz root@172.19.2.75:/home/root 
</code></pre><p><code>命令基本格式：</code></p>
<p>scp [OPTIONS] file_source file_target </p>
<p><code>从本地复制到远程</code></p>
<pre><code>$ scp local_file remote_username@remote_ip:remote_folder 
$ scp local_file remote_ip:remote_file 
</code></pre><p><code>从远程复制到本地</code></p>
<pre><code>scp root@www.cumt.edu.cn:/home/root/others/music /home/space/music/1.mp3 
scp -r www.cumt.edu.cn:/home/root/others/ /home/space/music/ 
</code></pre><p><code>复制目录</code>: OPTIONS 填入 <code>-r</code>即可</p>
<p>完整格式：<strong>scp [本地用户名]@[IP地址]:[文件名1] [远程用户名]@[IP地址]:[文件名2] 
</strong></p>
<p><code>本地用户名@IP地址:</code>可以不输入,可能需要输入远程用户名所对应的密码.</p>
<p><code>[OPTIONS]</code></p>
<p>-v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接 , 认证 , 或是配置错误 . </p>
<p>-C 使能压缩选项 . </p>
<p>-P 选择端口 . 注意 -p 已经被 rcp 使用 . </p>
<p>-4 强行使用 IPV4 地址 . </p>
<p>-6 强行使用 IPV6 地址 .</p>
<pre><code>注意两点： 
1.如果远程服务器防火墙有特殊限制，scp便要走特殊端口，具体用什么端口视情况而定，命令格式如下： 
#scp -p 4588 remote@www.abc.com:/usr/local/sin.sh /home/administrator 
2.使用scp要注意所使用的用户是否具有可读取远程服务器相应文件的权限。
</code></pre><p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-cp和scp命令&quot;&gt;&lt;a href=&quot;#Linux-cp和scp命令&quot; class=&quot;headerlink&quot; title=&quot;Linux cp和scp命令&quot;&gt;&lt;/a&gt;Linux cp和scp命令&lt;/h1&gt;&lt;p&gt;Linux为我们提供了两个用于文件copy的
    
    </summary>
    
    
      <category term="Linux" scheme="https://devchao.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>duoshuo</title>
    <link href="https://devchao.com/2017/03/23/duoshuo/"/>
    <id>https://devchao.com/2017/03/23/duoshuo/</id>
    <published>2017-03-23T06:43:04.000Z</published>
    <updated>2017-03-23T06:46:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>‘多说’评论界的老大，一路走好，不舍。<br><br><br><br><br>2017-3-21</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;‘多说’评论界的老大，一路走好，不舍。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2017-3-21&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="随笔" scheme="https://devchao.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>ColorPicker</title>
    <link href="https://devchao.com/2017/03/23/ColorPicker/"/>
    <id>https://devchao.com/2017/03/23/ColorPicker/</id>
    <published>2017-03-23T06:27:32.000Z</published>
    <updated>2017-03-23T06:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h1><p><img src="http://7xiwr4.com1.z0.glb.clouddn.com/colorPicker.gif" alt=""></p>
<p>##核心代码详解</p>
<hr>
<p>###取视图中某点的颜色</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">- (UIColor *) getColorOfPoint:(CGPoint)point InView:(UIView*)view</div><div class="line">&#123;</div><div class="line">    </div><div class="line">    unsigned char pixel[4] = &#123;0&#125;;</div><div class="line">    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    CGContextRef context = CGBitmapContextCreate(pixel,</div><div class="line">                                                 1, 1, 8, 4, colorSpace, (CGBitmapInfo)kCGImageAlphaPremultipliedLast);</div><div class="line">    </div><div class="line">    CGContextTranslateCTM(context, -point.x, -point.y);</div><div class="line">    </div><div class="line">    [view.layer renderInContext:context];</div><div class="line">    </div><div class="line">    CGContextRelease(context);</div><div class="line">    CGColorSpaceRelease(colorSpace);</div><div class="line">    </div><div class="line">    NSString *hexColor = [NSString stringWithFormat:@&quot;#%02x%02x%02x&quot;,pixel[0],pixel[1],pixel[2]];</div><div class="line">    </div><div class="line">    UIColor *color = [self getColorInformationWith:hexColor];</div><div class="line">    </div><div class="line">    return color;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (UIColor *)getColorInformationWith:(NSString*)hexColor</div><div class="line">&#123;</div><div class="line">    //转换hex值</div><div class="line">    unsigned int red ,green,blue;</div><div class="line">    </div><div class="line">    NSScanner *scanner = [NSScanner scannerWithString:[hexColor substringWithRange:NSMakeRange(1, 2)]];</div><div class="line">    [scanner scanHexInt:&amp;red];</div><div class="line">    </div><div class="line">    scanner = [NSScanner scannerWithString:[hexColor substringWithRange:NSMakeRange(3, 2)]];</div><div class="line">    [scanner scanHexInt:&amp;green];</div><div class="line">    </div><div class="line">    scanner = [NSScanner scannerWithString:[hexColor substringWithRange:NSMakeRange(5, 2)]];</div><div class="line">    [scanner scanHexInt:&amp;blue];</div><div class="line">    return [UIColor colorWithRed:red/255.0 green:green/255.0 blue:blue/255.0 alpha:1];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###实现UISlider渐变效果</p>
<ul>
<li>1.设置UISlider的MinimumTrackTintColor和MaximumTrackTintColor为[UIColor clearColor]。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[self.brightnessSlider setMinimumTrackTintColor:[UIColor clearColor]];</div><div class="line">    [self.brightnessSlider setMaximumTrackTintColor:[UIColor clearColor]];</div></pre></td></tr></table></figure>
<ul>
<li>2.设置UISlider的MaximumTrackImage为渐变的图片</li>
<li>3.设置UISlider的MinimumTrackImage为透明的图片</li>
<li>4.设置一个背景ImageView放在Slider的父视图上，位置大小和Slider的一样。并设置image为MaximumTrackImage的图片。</li>
</ul>
<p><code>设置图片</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-(void)changeSliderViewStyleWithColor:(UIColor *)color</div><div class="line">&#123;</div><div class="line">    //创建渐变图片</div><div class="line">    UIImage *GradientImage = [self createGradientImageWithSize:CGSizeMake(self.brightnessSlider.bounds.size.width, 10) startColor:color endColor:[UIColor colorWithRed:0 green:0 blue:0 alpha:1] cornerRadius:5.0f];</div><div class="line">    </div><div class="line">    UIImage *clearImage = [self createImageWithSize:CGSizeMake(self.brightnessSlider.bounds.size.width, 10) Color:[UIColor clearColor] cornerRadius:10.0f];</div><div class="line">    </div><div class="line">    [self.brightnessSlider setMaximumTrackImage:GradientImage forState:UIControlStateNormal];</div><div class="line">    [self.brightnessSlider setMinimumTrackImage:clearImage forState:UIControlStateNormal];</div><div class="line">    self.brightnessSliderBackView.image = GradientImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>创建渐变颜色的图片方法</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (UIImage *)createGradientImageWithSize:(CGSize)size startColor:(UIColor *)startColor endColor:(UIColor *)endColor cornerRadius:(CGFloat)radius</div><div class="line">&#123;</div><div class="line">    CGFloat height = size.height;</div><div class="line">    CGFloat with = size.width;</div><div class="line">    </div><div class="line">    CGFloat startR = 0,startG = 0, startB = 0, startA = 0;</div><div class="line">    BOOL startResult = [startColor getRed:&amp;startR green:&amp;startG blue:&amp;startB alpha:&amp;startA];</div><div class="line">    if (!startResult) return nil;</div><div class="line">    </div><div class="line">    CGFloat endR = 0 , endG = 0, endB = 0, endA = 0;</div><div class="line">    BOOL endResult = [endColor getRed:&amp;endR green:&amp;endG blue:&amp;endB alpha:&amp;endA];</div><div class="line">    if (!endResult) return nil;</div><div class="line">    //创建透明｜2倍图像(清晰，针对视网膜屏幕)上下文</div><div class="line">    UIGraphicsBeginImageContextWithOptions(CGSizeMake(with, height), NO, 2);</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    //设置圆角</div><div class="line">    [[UIBezierPath bezierPathWithRoundedRect:CGRectMake(0, 0, with, height) cornerRadius:radius] addClip];</div><div class="line">    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    const CGFloat components[] = &#123;</div><div class="line">                                startR, startG, startB, startA,</div><div class="line">                                endR, endG, endB, endA,</div><div class="line">                                &#125;;</div><div class="line">    </div><div class="line">    const CGFloat locations[] = &#123;0,1&#125;;</div><div class="line">    CGGradientRef gradientRf = CGGradientCreateWithColorComponents(colorSpace, components, locations, 2);</div><div class="line">    CGPoint startPoint = CGPointMake(0, height/2);</div><div class="line">    CGPoint endPoint = CGPointMake(with, height/2);</div><div class="line">    CGContextDrawLinearGradient(context, gradientRf, startPoint, endPoint, kCGGradientDrawsBeforeStartLocation);</div><div class="line">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">    CGColorSpaceRelease(colorSpace);</div><div class="line">    CGContextRelease(context);</div><div class="line">    return image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>创建单一颜色的图片</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (UIImage *)createImageWithSize:(CGSize)size Color:(UIColor *)color cornerRadius:(CGFloat)radius</div><div class="line">&#123;</div><div class="line">    UIGraphicsBeginImageContextWithOptions(size, NO, 2);</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    UIBezierPath *bezierPath = [UIBezierPath bezierPathWithRoundedRect:CGRectMake(0, 0, size.width, size.height) cornerRadius:radius];</div><div class="line">    [bezierPath addClip];</div><div class="line">    CGContextAddPath(context, bezierPath.CGPath);</div><div class="line">    CGContextSetFillColorWithColor(context, color.CGColor);</div><div class="line">    </div><div class="line">    CGContextFillPath(context);</div><div class="line">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">    CGContextRelease(context);</div><div class="line">    return image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/yachaocn/ColorPicker/archive/master.zip" target="_blank" rel="external">点击下载代码</a></p>
<blockquote>
<p><code>技术交流群:</code><strong>494826724</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ColorPicker&quot;&gt;&lt;a href=&quot;#ColorPicker&quot; class=&quot;headerlink&quot; title=&quot;ColorPicker&quot;&gt;&lt;/a&gt;ColorPicker&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7xiwr4.com1.z0.gl
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="https://devchao.com/2017/03/23/git%E6%93%8D%E4%BD%9C/"/>
    <id>https://devchao.com/2017/03/23/git操作/</id>
    <published>2017-03-23T03:18:12.000Z</published>
    <updated>2017-03-23T03:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git操作-By-亚超"><a href="#Git操作-By-亚超" class="headerlink" title="Git操作    - By 亚超"></a>Git操作    - By 亚超</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol>
<li><p>初始化仓库</p>
<ul>
<li>git init</li>
</ul>
</li>
<li><p>配置作者信息</p>
<ul>
<li>git config –global user.email “youremail@corp.com”</li>
<li>git config –global user.name “yourname”</li>
</ul>
</li>
<li><p>添加文件到暂存区</p>
<ul>
<li>git add \<filename\> </filename\></li>
<li>git add * (添加所有文件到暂存区)</li>
</ul>
</li>
<li>移除文件<ul>
<li>git rm \<filename\></filename\></li>
</ul>
</li>
<li>重命名一个文件<ul>
<li>git mv \<oldfilename\> \<newfilename\></newfilename\></oldfilename\></li>
</ul>
</li>
<li><p>提交暂存区</p>
<p> <code>git commit只会提交暂存区（staged）里面的文件</code></p>
<ul>
<li>git commit -m “message”    </li>
</ul>
</li>
<li>查看工作目录的状态<ul>
<li>git status</li>
</ul>
</li>
<li>查看提交历史记录<ul>
<li>git log</li>
</ul>
</li>
<li>查看文件改变<ul>
<li>git diff</li>
</ul>
</li>
</ol>
<hr>
<p>##撤销操作</p>
<ol>
<li>撤销加入暂存区的操作<ul>
<li>git reset HEAD \<file\></file\></li>
</ul>
</li>
<li>撤销修改的操作 <ul>
<li>git checkout – \<file\></file\></li>
</ul>
</li>
<li>将本地的修改放进回收站<ul>
<li>git stash</li>
</ul>
</li>
<li>从回收站中恢复本地的修改<ul>
<li>git stash apply</li>
</ul>
</li>
</ol>
<hr>
<h2 id="Tag操作"><a href="#Tag操作" class="headerlink" title="Tag操作"></a>Tag操作</h2><ol>
<li>查看tag<ul>
<li>git tag</li>
</ul>
</li>
<li>创建tag<ul>
<li>git tag -a v1.0 -m “my version 1.0”</li>
</ul>
</li>
<li>显示tag信息<ul>
<li>git show v1.0</li>
</ul>
</li>
<li>对之前的提交打tag<ul>
<li>git tag -a v0.1 -m “version 0.1”</li>
</ul>
</li>
</ol>
<hr>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ol>
<li>查看分支<ul>
<li>git branch</li>
</ul>
</li>
<li>创建分支<ul>
<li>git branch \<branchname\></branchname\></li>
</ul>
</li>
<li>删除分支<ul>
<li>git branch -d \<branchname\></branchname\></li>
</ul>
</li>
<li>切换分支<ul>
<li>git checkout \<branchname\></branchname\></li>
</ul>
</li>
<li>合并分支<ul>
<li>git merge \<branchname\></branchname\></li>
</ul>
</li>
<li>rebase操作<ul>
<li>git rebase \<basebranch\> \<newbranch\></newbranch\></basebranch\></li>
</ul>
</li>
</ol>
<hr>
<h2 id="远端仓库操作"><a href="#远端仓库操作" class="headerlink" title="远端仓库操作"></a>远端仓库操作</h2><ol>
<li>克隆一个远端仓库<ul>
<li>git clone <em>URL</em></li>
</ul>
</li>
<li>添加远端仓库<ul>
<li>git remote add \<name\> \<url\></url\></name\></li>
</ul>
</li>
<li>更新远端仓库的分支和数据<ul>
<li>git fetch \<name\> </name\></li>
</ul>
</li>
<li>获取并合并远端仓库的分支到当前分支<ul>
<li>git pull \<reponame\> \<branchname\></branchname\></reponame\></li>
<li>eg: <code>git pull origin master</code></li>
</ul>
</li>
<li>上传本地分支和数据到远端仓库<ul>
<li>git push \<reponame\> \<branchname\></branchname\></reponame\></li>
<li>eg: <code>git push origin master</code> </li>
</ul>
</li>
<li>跟踪远端仓库上的分支<ul>
<li>git checkout –track origin/testbranch</li>
<li>git checkout -b test origin/testbranch</li>
</ul>
</li>
</ol>
<hr>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git操作-By-亚超&quot;&gt;&lt;a href=&quot;#Git操作-By-亚超&quot; class=&quot;headerlink&quot; title=&quot;Git操作    - By 亚超&quot;&gt;&lt;/a&gt;Git操作    - By 亚超&lt;/h1&gt;&lt;h2 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操
    
    </summary>
    
    
      <category term="Git" scheme="https://devchao.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>init和initialize区别</title>
    <link href="https://devchao.com/2017/03/16/init%E5%92%8Cinitialize%E5%8C%BA%E5%88%AB/"/>
    <id>https://devchao.com/2017/03/16/init和initialize区别/</id>
    <published>2017-03-16T08:09:27.000Z</published>
    <updated>2017-03-23T06:58:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Objective-C中-init-initialize与load区别"><a href="#Objective-C中-init-initialize与load区别" class="headerlink" title="Objective-C中 init initialize与load区别"></a>Objective-C中 init initialize与load区别</h1><p><code>init和initialize</code></p>
<ul>
<li><p>init是“-”开头的方法</p>
</li>
<li><p>initialize是“+”开头的类方法</p>
</li>
<li><p>init在类实例化（new）的时候就会调用一次：[ClassName new]相当于[[class alloc]init],我们对init应该是很熟悉的，大多数时候我们不使用new来实例化，而是直接定义自己的init方法通过[[ClassName alloc]initWithXXX]这样来做。</p>
</li>
<li><p>initialize在向类发送消息的时候调用一次：什么是发送消息？实例化一个对象[ClassName new]是发送消息，调用一个类方法[ClassName method]也是向这个类发送消息。</p>
</li>
<li><p>在new的时候，initialize方法会在init之前先调用</p>
</li>
<li><p>只要new一次，init就会调用一次，new多少次，init就调用多少次，但initialize只会调用一次。</p>
</li>
<li><p>如果子类没有实现initialize的重写，在子类收到消息的时候，会调用两次initialize,一次是父类调用的，一次是子类调用的</p>
</li>
</ul>
<hr>
<p><code>+ (void)load</code></p>
<ul>
<li>+ (void)load 会在类或者类的分类添加到 Objective-c runtime 时调用，该调用发生在 application:willFinishLaunchingWithOptions: 调用之前调用。</li>
<li>父类的 +load 方法先于子类的 +load 方法调用，类本身的 +load 方法调用先于分类的 +load 方法调用。</li>
</ul>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Objective-C中-init-initialize与load区别&quot;&gt;&lt;a href=&quot;#Objective-C中-init-initialize与load区别&quot; class=&quot;headerlink&quot; title=&quot;Objective-C中 init init
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>installApp.md</title>
    <link href="https://devchao.com/2017/03/11/installApp-md/"/>
    <id>https://devchao.com/2017/03/11/installApp-md/</id>
    <published>2017-03-11T12:36:43.000Z</published>
    <updated>2017-03-11T12:36:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="itms-services://?action=download-manifest&url=https://github.com/yachaocn/APPInstall/blob/master/manifest.plist" target="_blank" rel="external">Install App</a></p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;itms-services://?action=download-manifest&amp;url=https://github.com/yachaocn/APPInstall/blob/master/manifest.plist&quot; target=&quot;_blank&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BackgroundFetch</title>
    <link href="https://devchao.com/2017/01/20/BackgroundFetch/"/>
    <id>https://devchao.com/2017/01/20/BackgroundFetch/</id>
    <published>2017-01-20T04:48:10.000Z</published>
    <updated>2017-01-20T04:50:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Background-Fetch"><a href="#Background-Fetch" class="headerlink" title="Background Fetch"></a>Background Fetch</h1><hr>
<p>###开启Background Fetch</p>
<p>1.在XCode-&gt;TARGETS-&gt;Capabilities-&gt;Background Modes打开并添加Background Fetch.<br>2.在- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions方法中加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] setMinimumBackgroundFetchInterval:UIApplicationBackgroundFetchIntervalMinimum];</div></pre></td></tr></table></figure>
<p>MinimumBackgroundFetchInterval参数值是两次Fetch时间间隔，不能保证每隔这个时间间隔都会调用。这里设置为UIApplicationBackgroundFetchIntervalMinimum，意思是尽可能频繁的调用我们的Fetch方法。</p>
<p>###调用Fetch方法<br>1.每次系统Fetch时都会调用如下方法，我们可以在该方法中做刷新数据等操作，操作执行完成以后需要要调用completionHandlerblock()例如：completionHandler(UIBackgroundFetchResultNewData),此回调会告诉系统可以挂起你的APP，并且系统会预估Fetch的耗电情况，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler&#123;&#125;;</div></pre></td></tr></table></figure>
<p>completionHandler有三个参数:</p>
<ul>
<li>UIBackgroundFetchResultNewData 成功拉取数据</li>
<li>UIBackgroundFetchResultNoData 没有新数据</li>
<li>UIBackgroundFetchResultFailed 拉取数据失败或者超时</li>
</ul>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler&#123;</div><div class="line">    </div><div class="line">    // Call or write any code necessary to get new data, process it and update the UI.</div><div class="line">    </div><div class="line">     // The logic for informing iOS about the fetch results in plain language:</div><div class="line">    if (/** NEW DATA EXISTS AND WAS SUCCESSFULLY PROCESSED **/) &#123;</div><div class="line">        completionHandler(UIBackgroundFetchResultNewData);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (/** NO NEW DATA EXISTS **/) &#123;</div><div class="line">        completionHandler(UIBackgroundFetchResultNewData);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (/** ANY ERROR OCCURS **/) &#123;</div><div class="line">        completionHandler(UIBackgroundFetchResultFailed);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.如果应用程式能够快速下载少量内容，并准确反映出他们有内容下载的时间，就会比需要长时间下载内容的APP更可能收到执行时间，所以尽可能地缩短你的任务执行时间。</p>
<p>###调试BackGround fetch</p>
<p>1.Debug &gt; Simulate Background Fetch.</p>
<p>2.debug模式下，选中Product &gt; Scheme &gt; Edit Scheme ，打开Options,勾选Launch due to a background fetch event. command＋R运行。</p>
<p><code>技术交流群:</code><strong>494826724</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Background-Fetch&quot;&gt;&lt;a href=&quot;#Background-Fetch&quot; class=&quot;headerlink&quot; title=&quot;Background Fetch&quot;&gt;&lt;/a&gt;Background Fetch&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;###开启Back
    
    </summary>
    
    
      <category term="iOS" scheme="https://devchao.com/tags/iOS/"/>
    
  </entry>
  
</feed>
